/******************************************************/
/* Do not include this file. This file is included by */
/* abstract_domain.hpp.                               */
/******************************************************/


/**
 * Available macros to provide empty or default implementations for
 * abstract operations
 * 
 * NUMERICAL_OPERATIONS_NOT_IMPLEMENTED(DOM)
 * BOOL_OPERATIONS_NOT_IMPLEMENTED(DOM)
 * REGION_AND_REFERENCE_OPERATIONS_NOT_IMPLEMENTED(DOM)
 * ARRAY_OPERATIONS_NOT_IMPLEMENTED(DOM)
 *
 * DEFAULT_SELECT(DOM)
 * DEFAULT_SELECT_REF(DOM)
 * DEFAULT_SELECT_BOOL(DOM)
 * DEFAULT_WEAK_ASSIGN(DOM)
 * DEFAULT_WEAK_BOOL_ASSIGN(DOM) 
 * DEFAULT_ENTAILS(DOM)
 *
 * Note that these macros are not really necessary because they could
 * be part of the base class (abstract_domain).  However, we prefer to
 * enforce explicit calls to these macros so that it's more obvious
 * which operations are not implemented or which operations could be
 * implemented more efficiently.
 **/


#define NUMERICAL_OPERATIONS_NOT_IMPLEMENTED(DOM)                              \
  virtual void apply(crab::domains::arith_operation_t op, const variable_t &x, \
                     const variable_t &y, const variable_t &z) override {}     \
  virtual void apply(crab::domains::arith_operation_t op, const variable_t &x, \
                     const variable_t &y, number_t k) override {}              \
  virtual void assign(const variable_t &x, const linear_expression_t &e) override {} \
  virtual void weak_assign(const variable_t &x, const linear_expression_t &e) override {} \
  virtual void select(const variable_t &lhs, const linear_constraint_t &cond,  \
		      const linear_expression_t &e1,			       \
		      const linear_expression_t &e2) override {}               \
  virtual void backward_assign(const variable_t &x,                            \
                               const linear_expression_t &e,                   \
                               const DOM &invariant) override {}               \
  virtual void backward_apply(crab::domains::arith_operation_t op,             \
                              const variable_t &x, const variable_t &y,        \
                              number_t z, const DOM &invariant) override {}    \
  virtual void backward_apply(crab::domains::arith_operation_t op,             \
                              const variable_t &x, const variable_t &y,        \
                              const variable_t &z, const DOM &invariant)       \
      override {}                                                              \
  virtual void operator+=(const linear_constraint_system_t &csts) override {}  \
  virtual bool entails(const linear_constraint_t &rhs) const override {        \
    return false;							       \
  } 									       \
  virtual interval_t operator[](const variable_t &x) override {                \
    return at(x);							       \
  }                                                                            \
  virtual interval_t at(const variable_t &x) const override {		       \
    return interval_t::top();                                                  \
  }									       \
  virtual void apply(crab::domains::int_conv_operation_t op,                   \
                     const variable_t &dst, const variable_t &src) override {} \
  virtual void apply(crab::domains::bitwise_operation_t op,                    \
                     const variable_t &x, const variable_t &y,                 \
                     const variable_t &z) override {}                          \
  virtual void apply(crab::domains::bitwise_operation_t op,                    \
                     const variable_t &x, const variable_t &y, number_t z)     \
      override {}

#define BOOL_OPERATIONS_NOT_IMPLEMENTED(DOM)                                   \
  virtual void assign_bool_cst(const variable_t &lhs,                          \
                               const linear_constraint_t &rhs) override {}     \
  virtual void assign_bool_ref_cst(                                            \
      const variable_t &lhs, const reference_constraint_t &rhs) override {}    \
  virtual void assign_bool_var(const variable_t &lhs, const variable_t &rhs, bool is_not_rhs) override {} \
  virtual void weak_assign_bool_cst(const variable_t &lhs,                      \
                                    const linear_constraint_t &rhs) override {} \
  virtual void weak_assign_bool_var(const variable_t &lhs, const variable_t &rhs, bool is_not_rhs) override {} \
  virtual void apply_binary_bool(crab::domains::bool_operation_t op,           \
                                 const variable_t &x, const variable_t &y,     \
                                 const variable_t &z) override {}              \
  virtual void assume_bool(const variable_t &v, bool is_negated) override {}   \
  virtual void select_bool(const variable_t &lhs, const variable_t &cond,      \
			   const variable_t &b1, const variable_t &b2) override {} \
  virtual void backward_assign_bool_cst(const variable_t &lhs,                 \
                                        const linear_constraint_t &rhs,        \
                                        const DOM &invariant) override {}      \
  virtual void backward_assign_bool_ref_cst(const variable_t &lhs,             \
                                            const reference_constraint_t &rhs, \
                                            const DOM &invariant) override {}  \
  virtual void backward_assign_bool_var(                                       \
      const variable_t &lhs, const variable_t &rhs, bool is_not_rhs,           \
      const DOM &invariant) override {}                                        \
  virtual void backward_apply_binary_bool(                                     \
      crab::domains::bool_operation_t op, const variable_t &x,                 \
      const variable_t &y, const variable_t &z, const DOM &invariant)          \
      override {}

#define REGION_AND_REFERENCE_OPERATIONS_NOT_IMPLEMENTED(DOM)                   \
  virtual void region_init(const variable_t &reg) override {}                  \
  virtual void region_copy(const variable_t &lhs_reg,                          \
                           const variable_t &rhs_reg) override {}              \
  virtual void region_cast(const variable_t &src_reg,                          \
                           const variable_t &dst_reg) override {}              \
  virtual void ref_make(const variable_t &ref, const variable_t &reg, 	       \
			const variable_or_constant_t &size,                    \
                        const crab::allocation_site &as)		       \
      override {}                                                              \
  virtual void ref_free(const variable_t &reg, const variable_t &ref)	       \
      override {}                                                              \
  virtual void ref_load(const variable_t &ref, const variable_t &reg,          \
                        const variable_t &res) override {}                     \
  virtual void ref_store(const variable_t &ref, const variable_t &reg,         \
                         const variable_or_constant_t &val) override {}        \
  virtual void ref_gep(const variable_t &ref1, const variable_t &reg1,         \
                       const variable_t &ref2, const variable_t &reg2,         \
                       const linear_expression_t &offset) override {}          \
  virtual void ref_assume(const reference_constraint_t &cst) override {}       \
  virtual void ref_to_int(const variable_t &reg, const variable_t &ref,        \
                          const variable_t &int_var) override {}               \
  virtual void int_to_ref(const variable_t &int_var, const variable_t &reg,    \
                          const variable_t &ref) override {}                   \
  virtual void select_ref(const variable_t &lhs_ref, const variable_t &lhs_rgn,\
			  const variable_t &cond,			       \
			  const variable_or_constant_t &ref1,		       \
			  const boost::optional<variable_t> &rgn1,	       \
			  const variable_or_constant_t &ref2,		       \
			  const boost::optional<variable_t> &rgn2) override {} \
  virtual crab::domains::boolean_value is_null_ref(const variable_t &ref) override  \
  { return crab::domains::boolean_value::top();}			       \
  virtual bool get_allocation_sites(const variable_t &ref,                     \
    std::vector<crab::allocation_site> &out) override		               \
  { return false; }							       \
  virtual bool get_tags(const variable_t &rng, const variable_t &ref,	       \
    std::vector<uint64_t> &out) override		                       \
  { return false; }							
  
#define ARRAY_OPERATIONS_NOT_IMPLEMENTED(DOM)                                  \
  virtual void array_init(                                                     \
      const variable_t &a, const linear_expression_t &elem_size,               \
      const linear_expression_t &lb_idx, const linear_expression_t &ub_idx,    \
      const linear_expression_t &val) override {}                              \
  virtual void array_load(const variable_t &lhs, const variable_t &a,          \
                          const linear_expression_t &elem_size,                \
                          const linear_expression_t &i) override {             \
    operator-=(lhs);                                                           \
  }                                                                            \
  virtual void array_store(                                                    \
      const variable_t &a, const linear_expression_t &elem_size,               \
      const linear_expression_t &i, const linear_expression_t &v,              \
      bool is_strong_update) override {}                                       \
  virtual void array_store_range(                                              \
      const variable_t &a, const linear_expression_t &elem_size,               \
      const linear_expression_t &i, const linear_expression_t &j,              \
      const linear_expression_t &v) override {}                                \
  virtual void array_assign(const variable_t &lhs, const variable_t &rhs)      \
      override {}                                                              \
  virtual void backward_array_init(                                            \
      const variable_t &a, const linear_expression_t &elem_size,               \
      const linear_expression_t &lb_idx, const linear_expression_t &ub_idx,    \
      const linear_expression_t &val, const DOM &invariant) override {}        \
  virtual void backward_array_load(const variable_t &lhs, const variable_t &a, \
                                   const linear_expression_t &elem_size,       \
                                   const linear_expression_t &i,               \
                                   const DOM &invariant) override {}           \
  virtual void backward_array_store(                                           \
      const variable_t &a, const linear_expression_t &elem_size,               \
      const linear_expression_t &i, const linear_expression_t &v,              \
      bool is_strong_update, const DOM &invariant) override {}                 \
  virtual void backward_array_store_range(                                     \
      const variable_t &a, const linear_expression_t &elem_size,               \
      const linear_expression_t &i, const linear_expression_t &j,              \
      const linear_expression_t &v, const DOM &invariant) override {}          \
  virtual void backward_array_assign(const variable_t &lhs,                    \
                                     const variable_t &rhs,                    \
                                     const DOM &invariant) override {}

#define DEFAULT_SELECT(DOM)						\
  virtual void select(const variable_t &lhs, const linear_constraint_t &cond,  \
		      const linear_expression_t &e1,  const linear_expression_t &e2) override { \
  CRAB_DOMAIN_SCOPED_STATS(this, ".select", 0);		                \
  if (!is_bottom()) {							\
  DOM inv1(*this);	                                                \
  inv1 += cond;								\
  if (inv1.is_bottom()) {						\
    assign(lhs, e2);							\
    return;								\
  }									\
  DOM inv2(*this); 							\
  inv2 += cond.negate();						\
  if (inv2.is_bottom()) {						\
    assign(lhs, e1);							\
    return;								\
  }									\
  inv1.assign(lhs, e1);							\
  inv2.assign(lhs, e2);							\
  *this = inv1 | inv2;							\
 }									\
}

#define DEFAULT_SELECT_REF(DOM)                                         \
virtual void select_ref(const variable_t &lhs_ref, const variable_t &lhs_rgn, const variable_t &cond, \
			const variable_or_constant_t &ref1,		\
			const boost::optional<variable_t> &rgn1,	\
			const variable_or_constant_t &ref2,		\
			const boost::optional<variable_t> &rgn2) override { \
  CRAB_DOMAIN_SCOPED_STATS(this, ".select_ref", 0); 		        \
  if (!is_bottom()) {							\
    auto eval_true_value = [&lhs_ref, &lhs_rgn, &ref1, &rgn1](DOM &out) {\
			     if (ref1.is_reference_null()) {		\
			       out -= lhs_ref;				\
			       out.ref_assume(reference_constraint_t::mk_null(lhs_ref));\
			     } else {					\
			       assert(ref1.is_variable());		\
			       assert(rgn1);				\
			       linear_expression_t zero_offset(number_t(0)); \
			       out.ref_gep(ref1.get_variable(), *rgn1, lhs_ref, lhs_rgn, zero_offset); \
			     }						\
			   };						\
    auto eval_false_value = [&lhs_ref, &lhs_rgn, &ref2, &rgn2](DOM &out) { \
			      if (ref2.is_reference_null()) {		\
				out -= lhs_ref;				\
				out.ref_assume(reference_constraint_t::mk_null(lhs_ref)); \
			      } else {					\
				assert(ref2.is_variable());		\
				assert(rgn2);				\
				linear_expression_t zero_offset(number_t(0)); \
				out.ref_gep(ref2.get_variable(), *rgn2, lhs_ref, lhs_rgn, zero_offset); \
			      }						\
			    };						\
    const bool negate = true;						\
    DOM inv1(*this);							\
    inv1.assume_bool(cond, !negate);					\
    if (inv1.is_bottom()) {						\
      eval_false_value(*this);						\
      return;								\
    }									\
    DOM inv2(*this);							\
    inv2.assume_bool(cond, negate);					\
    if (inv2.is_bottom()) {						\
      eval_true_value(*this);						\
      return;								\
    }									\
    eval_true_value(inv1);						\
    eval_false_value(inv2);						\
    *this = inv1 | inv2;						\
  }									\
}

#define DEFAULT_SELECT_BOOL(DOM)                                        \
 virtual void select_bool(const variable_t &lhs, const variable_t &cond,\
			  const variable_t &b1, const variable_t &b2) override { \
   CRAB_DOMAIN_SCOPED_STATS(this, ".select_bool", 0);		        \
   if (!is_bottom()) {							\
     const bool negate = true;						\
     DOM inv1(*this);							\
     inv1.assume_bool(cond, !negate);					\
     if (inv1.is_bottom()) {						\
       assign_bool_var(lhs, b2, !negate);				\
       return;								\
     }									\
     DOM inv2(*this);							\
     inv2.assume_bool(cond, negate);					\
     if (inv2.is_bottom()) {						\
       assign_bool_var(lhs, b1, !negate);				\
       return;								\
     }                                                                  \
     inv1.assign_bool_var(lhs, b1, !negate);				\
     inv2.assign_bool_var(lhs, b2, !negate);				\
     *this = inv1 | inv2;						\
   }									\
 }

#define DEFAULT_WEAK_ASSIGN(DOM)                                        \
virtual void weak_assign(const variable_t &x, const linear_expression_t &e) override { \
   if (!is_bottom()) {                                                  \
     DOM other(*this);                                                  \
     other.assign(x, e);                                                \
     *this |= other;                                                    \
   }                                                                    \
}                                                                       

#define DEFAULT_WEAK_BOOL_ASSIGN(DOM)                                        \
virtual void weak_assign_bool_cst(const variable_t &lhs,                     \
                                  const linear_constraint_t &rhs) override { \
   if (!is_bottom()) {                                                       \
     DOM other(*this);                                                       \
     other.assign_bool_cst(lhs, rhs);                                        \
     *this |= other;                                                         \
   }                                                                         \
}                                                                            \
virtual void weak_assign_bool_var(const variable_t &lhs, const variable_t &rhs, bool is_not_rhs) override { \
   if (!is_bottom()) {                                                       \
     DOM other(*this);                                                       \
     other.assign_bool_var(lhs, rhs, is_not_rhs);                            \
     *this |= other;                                                         \
   }                                                                         \
}

#define DEFAULT_ENTAILS(DOM)						\
virtual bool entails(const linear_constraint_t &cst) const override {   \
 if (is_bottom()) {							\
   return true;                                                         \
 } if (cst.is_tautology()) {						\
   return true;                                                         \
 } if (cst.is_contradiction()) {					\
   return false;							\
 }									\
 auto entailmentFn = [this](const linear_constraint_t &c) -> bool {	\
    DOM dom(*this);						        \
    linear_constraint_t neg_c = c.negate();			        \
    dom += neg_c;						        \
    return dom.is_bottom();					        \
 };									\
if (cst.is_equality()) {						\
  linear_constraint_system_t inequalities;				\
  inequalities += linear_constraint_t(cst.expression(), 		\
				      linear_constraint_t::INEQUALITY); \
  inequalities += linear_constraint_t(cst.expression() * number_t(-1),	\
				    linear_constraint_t::INEQUALITY);   \
  return std::all_of(inequalities.begin(), inequalities.end(),		\
		       entailmentFn);					\
 } else {								\
  return entailmentFn(cst);						\
 }									\
}

/**
 * Some convenient macros
 * 
 *   CRAB_DOMAIN_SCOPED_STATS(who, suffix, active)
 *     increase **both** timer and counter for who->domain_name() + suffix if active=1
 *     This macro avoids string creation if active=0. Moreover, it concats
 *     efficiently two strings.
 *
 *   CRAB_DOMAIN_COUNT_STATS(suffix, active)
 *     increase only counter for this->domain_name() + suffix if active=1
 *     This macro avoids string creation if active=0, but it concatenates
 *     strings in an expensive way.
**/
#include <crab/config.h>
#ifdef CRAB_STATS
#define CRAB_DOMAIN_SCOPED_STATS(who, suffix, active) \
  CRAB_DOMAIN_SCOPED_STATS_(who, suffix, active)
#define CRAB_DOMAIN_SCOPED_STATS_(who, suffix, active) \
  CRAB_DOMAIN_SCOPED_STATS_ ## active(who, suffix)
#define CRAB_DOMAIN_SCOPED_STATS_0(who, suffix) 
#define CRAB_DOMAIN_SCOPED_STATS_1(who, suffix) \
  crab::ScopedCrabStats __st__((who)->domain_name(), suffix, true);

#define CRAB_DOMAIN_COUNT_STATS(suffix, active) \
  CRAB_DOMAIN_COUNT_STATS_(suffix, active)
#define CRAB_DOMAIN_COUNT_STATS_(suffix, active) \
  CRAB_DOMAIN_COUNT_STATS_ ## active(suffix)
#define CRAB_DOMAIN_COUNT_STATS_0(suffix) 
#define CRAB_DOMAIN_COUNT_STATS_1(suffix) \
  crab::CrabStats::count(this->domain_name() + suffix);
#else
#define CRAB_DOMAIN_SCOPED_STATS(who, suffix, active)
#define CRAB_DOMAIN_COUNT_STATS(suffix, active) 
#endif
