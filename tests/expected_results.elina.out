=== Begin ./test-bin/backward-1-elina ===
entry:
  goto bb1,bb2;
bb1:
  assume(-x <= 0);
  y = x;
  goto bb3;
bb3:
  assume(-y <= -1);
  assert(x != 0);

bb2:
  assume(x <= -1);
  tmp = 0;
  y = tmp-x;
  goto bb3;

Invariants using ElinaOct
entry={}
bb2={}
bb3={x-y <= 0; -x-y <= 0; -y <= 0}
bb1={}
 --- SAFE --------------------
Property : x != 0
Invariant: {x-y <= 0; -x-y <= 0; -y <= -1}
Note: it was proven by the forward+backward analysis
 -----------------------------
user-defined assertion checker
1  Number of total safe checks
0  Number of total error checks
0  Number of total warning checks
0  Number of total unreachable checks

=== End ./test-bin/backward-1-elina ===
=== Begin ./test-bin/backward-2-elina ===
entry:
  goto bb1,bb2;
bb1:
  assume(-x <= -1);
  y = x;
  goto bb3;
bb3:
  assume(-y <= -6);
  assert(x <= 5);
  assert(-x <= 5);

bb2:
  assume(x <= 0);
  tmp = 0;
  y = tmp-x;
  goto bb3;

Invariants using ElinaOct
entry={}
bb2={}
bb3={x-y <= 0; -x-y <= 0; -y <= 0}
bb1={}
 --- WARNING -----------------
Property : x <= 5
Invariant: {x-y <= 0; -x-y <= 0; -y <= -6}
 -----------------------------
 --- WARNING -----------------
Property : -x <= 5
Invariant: {x <= 5; x-y <= -1; -x-y <= 0; -y <= -6}
 -----------------------------
user-defined assertion checker
0  Number of total safe checks
0  Number of total error checks
2  Number of total warning checks
0  Number of total unreachable checks

=== End ./test-bin/backward-2-elina ===
=== Begin ./test-bin/backward-3-elina ===
bb1:
  x = 0;
  y = 0;
  goto bb2;
bb2:
  goto bb3,bb4;
bb3:
  assume(x <= 99);
  x = x+1;
  y = y+1;
  goto bb2;
bb4:
  assume(-x <= -100);
  assert(y <= 100);


Invariants using ElinaOct
bb1={}
bb2={-x <= 0; x <= 100; x-y <= 0; -x-y <= 0; -y <= 0; x+y <= 200; -x+y <= 0; y <= 100}
bb4={-x <= 0; x <= 100; x-y <= 0; -x-y <= 0; -y <= 0; x+y <= 200; -x+y <= 0; y <= 100}
bb3={-x <= 0; x <= 100; x-y <= 0; -x-y <= 0; -y <= 0; x+y <= 200; -x+y <= 0; y <= 100}
 --- SAFE --------------------
Property : y <= 100
Invariant: {-x <= -100; x <= 100; x-y <= 0; -x-y <= -200; -y <= -100; x+y <= 200; -x+y <= 0; y <= 100}
Note: it was proven by the forward+backward analysis
 -----------------------------
user-defined assertion checker
1  Number of total safe checks
0  Number of total error checks
0  Number of total warning checks
0  Number of total unreachable checks

=== End ./test-bin/backward-3-elina ===
=== Begin ./test-bin/backward-4-elina ===
bb1:
  x = 0;
  goto bb2;
bb2:
  goto bb3,bb4;
bb3:
  assume(x <= 99);
  x = x+1;
  goto bb2;
bb4:
  assume(-x <= -100);
  assert(x <= 100);


Invariants using ElinaOct
bb1={}
bb2={-x <= 0; x <= 100}
bb4={-x <= 0}
bb3={-x <= 0}
 --- SAFE --------------------
Property : x <= 100
Invariant: {-x <= -100}
Note: it was proven by the forward+backward analysis
 -----------------------------
user-defined assertion checker
1  Number of total safe checks
0  Number of total error checks
0  Number of total warning checks
0  Number of total unreachable checks

=== End ./test-bin/backward-4-elina ===
=== Begin ./test-bin/bakhirkin-elina ===
entry:
  x = 0;
  goto header1;
header1:
  goto body1,exit1;
body1:
  x = x+y;
  goto header1;
exit1:
  goto ifxpos,ret;
ifxpos:
  assume(-x <= -1);
  goto header2;
header2:
  goto body2,exit2;
body2:
  y = y+x;
  goto header2;
exit2:
  assert(-y <= 0);
  goto ret;
ret:


Invariants using ElinaOct
entry={}
header1={}
exit1={}
ret={}
ifxpos={}
header2={-x <= -1}
exit2={-x <= -1}
body2={-x <= -1}
body1={}
 --- WARNING -----------------
Property : -y <= 0
Invariant: {-x <= -1}
 -----------------------------
user-defined assertion checker
0  Number of total safe checks
0  Number of total error checks
1  Number of total warning checks
0  Number of total unreachable checks

=== End ./test-bin/bakhirkin-elina ===
=== Begin ./test-bin/elina-domains ===
entry:
  k = 0;
  i = 0;
  goto bb1;
bb1:
  goto bb1_t,bb1_f;
bb1_t:
  assume(i <= 99);
  goto bb2;
bb2:
  i = i+1;
  k = k+1;
  goto bb1;
bb1_f:
  assume(-i <= -100);
  goto ret;
ret:


Invariants using ElinaOct
entry={}
bb1={-i <= 0; i <= 100; i-k <= 0; -i-k <= 0; -k <= 0; i+k <= 200; -i+k <= 0; k <= 100}
bb1_f={-i <= 0; i <= 100; i-k <= 0; -i-k <= 0; -k <= 0; i+k <= 200; -i+k <= 0; k <= 100}
ret={-i <= -100; i <= 100; i-k <= 0; -i-k <= -200; -k <= -100; i+k <= 200; -i+k <= 0; k <= 100}
bb1_t={-i <= 0; i <= 100; i-k <= 0; -i-k <= 0; -k <= 0; i+k <= 200; -i+k <= 0; k <= 100}
bb2={-i <= 0; i <= 99; i-k <= 0; -i-k <= 0; -k <= 0; i+k <= 198; -i+k <= 0; k <= 99}
Abstract trace: entry (bb1 bb1_t bb2)^{3} bb1_f ret

Invariants using ElinaPk
entry={}
bb1={i-k = 0; -i <= 0; i <= 100}
bb1_f={i-k = 0; -i <= 0; i <= 100}
ret={i = 100; -k = -100}
bb1_t={i-k = 0; -i <= 0; i <= 100}
bb2={i-k = 0; -k <= 0; k <= 99}
Abstract trace: entry (bb1 bb1_t bb2)^{3} bb1_f ret

loop1_entry:
  i = 0;
  k = 30;
  goto loop1_bb1;
loop1_bb1:
  goto loop1_bb1_t,loop1_bb1_f;
loop1_bb1_t:
  assume(i <= 9);
  goto loop1_bb2;
loop1_bb2:
  i = i+1;
  goto loop1_bb1;
loop1_bb1_f:
  assume(-i <= -10);
  goto loop2_entry;
loop2_entry:
  j = 0;
  goto loop2_bb1;
loop2_bb1:
  goto loop2_bb1_t,loop2_bb1_f;
loop2_bb1_t:
  assume(j <= 9);
  goto loop2_bb2;
loop2_bb2:
  j = j+1;
  goto loop2_bb1;
loop2_bb1_f:
  assume(-j <= -10);
  goto ret;
ret:


Invariants using ElinaZones
loop1_entry={}
loop1_bb1={-k <= -30; k <= 30; -i <= 0; i <= 10}
loop1_bb1_f={-k <= -30; k <= 30; -i <= 0; i <= 10}
loop2_entry={-k <= -30; k <= 30; -i <= -10; i <= 10}
loop2_bb1={-k <= -30; k <= 30; -j <= 0; j <= 10; -i <= -10; i <= 10}
loop2_bb1_f={-k <= -30; k <= 30; -j <= 0; j <= 10; -i <= -10; i <= 10}
ret={-i <= -10; i <= 10; -k <= -30; k <= 30; -j <= -10; j <= 10}
loop2_bb1_t={-k <= -30; k <= 30; -j <= 0; j <= 10; -i <= -10; i <= 10}
loop2_bb2={-i <= -10; i <= 10; -k <= -30; k <= 30; -j <= 0; j <= 9}
loop1_bb1_t={-k <= -30; k <= 30; -i <= 0; i <= 10}
loop1_bb2={-k <= -30; k <= 30; -i <= 0; i <= 9}
Abstract trace: loop1_entry (loop1_bb1 loop1_bb1_t loop1_bb2)^{3} loop1_bb1_f loop2_entry (loop2_bb1 loop2_bb1_t loop2_bb2)^{3} loop2_bb1_f ret

Invariants using ElinaOct
loop1_entry={}
loop1_bb1={-i <= 0; i <= 10; i-k <= -20; -i-k <= -30; -k <= -30; i+k <= 40; -i+k <= 30; k <= 30}
loop1_bb1_f={-i <= 0; i <= 10; i-k <= -20; -i-k <= -30; -k <= -30; i+k <= 40; -i+k <= 30; k <= 30}
loop2_entry={-i <= -10; i <= 10; i-k <= -20; -i-k <= -40; -k <= -30; i+k <= 40; -i+k <= 20; k <= 30}
loop2_bb1={-i <= -10; i <= 10; i-j <= 10; -i-j <= -10; -j <= 0; i+j <= 20; -i+j <= 0; j <= 10; i-k <= -20; -i-k <= -40; j-k <= -20; -j-k <= -30; -k <= -30; i+k <= 40; -i+k <= 20; j+k <= 40; -j+k <= 30; k <= 30}
loop2_bb1_f={-i <= -10; i <= 10; i-j <= 10; -i-j <= -10; -j <= 0; i+j <= 20; -i+j <= 0; j <= 10; i-k <= -20; -i-k <= -40; j-k <= -20; -j-k <= -30; -k <= -30; i+k <= 40; -i+k <= 20; j+k <= 40; -j+k <= 30; k <= 30}
ret={-i <= -10; i <= 10; i-j <= 0; -i-j <= -20; -j <= -10; i+j <= 20; -i+j <= 0; j <= 10; i-k <= -20; -i-k <= -40; j-k <= -20; -j-k <= -40; -k <= -30; i+k <= 40; -i+k <= 20; j+k <= 40; -j+k <= 20; k <= 30}
loop2_bb1_t={-i <= -10; i <= 10; i-j <= 10; -i-j <= -10; -j <= 0; i+j <= 20; -i+j <= 0; j <= 10; i-k <= -20; -i-k <= -40; j-k <= -20; -j-k <= -30; -k <= -30; i+k <= 40; -i+k <= 20; j+k <= 40; -j+k <= 30; k <= 30}
loop2_bb2={-i <= -10; i <= 10; i-j <= 10; -i-j <= -10; -j <= 0; i+j <= 19; -i+j <= -1; j <= 9; i-k <= -20; -i-k <= -40; j-k <= -21; -j-k <= -30; -k <= -30; i+k <= 40; -i+k <= 20; j+k <= 39; -j+k <= 30; k <= 30}
loop1_bb1_t={-i <= 0; i <= 10; i-k <= -20; -i-k <= -30; -k <= -30; i+k <= 40; -i+k <= 30; k <= 30}
loop1_bb2={-i <= 0; i <= 9; i-k <= -21; -i-k <= -30; -k <= -30; i+k <= 39; -i+k <= 30; k <= 30}
Abstract trace: loop1_entry (loop1_bb1 loop1_bb1_t loop1_bb2)^{3} loop1_bb1_f loop2_entry (loop2_bb1 loop2_bb1_t loop2_bb2)^{3} loop2_bb1_f ret

Invariants using ElinaPk
loop1_entry={}
loop1_bb1={-i <= 0; i <= 10; -k = -30}
loop1_bb1_f={-i <= 0; i <= 10; -k = -30}
loop2_entry={-i = -10; -k = -30}
loop2_bb1={-j <= 0; j <= 10; -i = -10; -k = -30}
loop2_bb1_f={-j <= 0; j <= 10; -i = -10; -k = -30}
ret={-i = -10; -j = -10; -k = -30}
loop2_bb1_t={-j <= 0; j <= 10; -i = -10; -k = -30}
loop2_bb2={-i = -10; -j <= 0; j <= 9; -k = -30}
loop1_bb1_t={-i <= 0; i <= 10; -k = -30}
loop1_bb2={-i <= 0; i <= 9; -k = -30}
Abstract trace: loop1_entry (loop1_bb1 loop1_bb1_t loop1_bb2)^{3} loop1_bb1_f loop2_entry (loop2_bb1 loop2_bb1_t loop2_bb2)^{3} loop2_bb1_f ret

entry:
  i = 0;
  goto loop1_head;
loop1_head:
  goto loop1_t,loop1_f;
loop1_t:
  assume(i <= 10);
  goto loop1_body;
loop1_body:
  i = i+1;
  goto loop1_body_t,loop1_body_f;
loop1_body_t:
  assume(-i <= -9);
  i = 0;
  goto loop1_body_x;
loop1_body_x:
  goto loop1_head;
loop1_body_f:
  assume(i <= 8);
  goto loop1_body_x;
loop1_f:
  assume(-i <= -11);
  goto cont;
cont:
  goto loop2_head;
loop2_head:
  goto loop2_t,loop2_f;
loop2_t:
  assume(i <= 100);
  goto loop2_body;
loop2_body:
  i = i-1;
  goto loop2_head;
loop2_f:
  assume(-i <= -101);
  goto ret;
ret:


Invariants using ElinaZones
entry={}
loop1_head={-i <= 0; i <= 8}
loop1_f={-i <= 0; i <= 8}
cont=_|_
loop2_head=_|_
loop2_f=_|_
ret=_|_
loop2_t=_|_
loop2_body=_|_
loop1_t={-i <= 0; i <= 8}
loop1_body={-i <= 0; i <= 8}
loop1_body_f={-i <= -1; i <= 9}
loop1_body_x={-i <= 0; i <= 8}
loop1_body_t={-i <= -1; i <= 9}
Abstract trace: entry (loop1_head loop1_t loop1_body loop1_body_f loop1_body_t loop1_body_x)^{3} loop1_f cont (loop2_head loop2_t loop2_body)^{1} loop2_f ret

Invariants using ElinaOct
entry={}
loop1_head={-i <= 0; i <= 8}
loop1_f={-i <= 0; i <= 8}
cont=_|_
loop2_head=_|_
loop2_f=_|_
ret=_|_
loop2_t=_|_
loop2_body=_|_
loop1_t={-i <= 0; i <= 8}
loop1_body={-i <= 0; i <= 8}
loop1_body_f={-i <= -1; i <= 9}
loop1_body_x={-i <= 0; i <= 8}
loop1_body_t={-i <= -1; i <= 9}
Abstract trace: entry (loop1_head loop1_t loop1_body loop1_body_f loop1_body_t loop1_body_x)^{3} loop1_f cont (loop2_head loop2_t loop2_body)^{1} loop2_f ret

Invariants using ElinaPk
entry={}
loop1_head={-i <= 0; i <= 8}
loop1_f={-i <= 0; i <= 8}
cont=_|_
loop2_head=_|_
loop2_f=_|_
ret=_|_
loop2_t=_|_
loop2_body=_|_
loop1_t={-i <= 0; i <= 8}
loop1_body={-i <= 0; i <= 8}
loop1_body_f={-i <= -1; i <= 9}
loop1_body_x={-i <= 0; i <= 8}
loop1_body_t={-i <= -1; i <= 9}
Abstract trace: entry (loop1_head loop1_t loop1_body loop1_body_f loop1_body_t loop1_body_x)^{3} loop1_f cont (loop2_head loop2_t loop2_body)^{1} loop2_f ret

entry:
  i = 0;
  p = 0;
  goto loop_head;
loop_head:
  goto loop_t,loop_f;
loop_t:
  assume(i <= 9);
  goto loop_body;
loop_body:
  i = i+1;
  p = p+4;
  goto loop_head;
loop_f:
  assume(-i <= -10);
  goto ret;
ret:


Invariants using ElinaZones
entry={}
loop_head={-i <= 0; i <= 10; i-p <= 0; -p <= 0}
loop_f={-i <= 0; i <= 10; i-p <= 0; -p <= 0}
ret={-i <= -10; i <= 10; i-p <= 0; -p <= -10}
loop_t={-i <= 0; i <= 10; i-p <= 0; -p <= 0}
loop_body={-i <= 0; i <= 9; i-p <= 0; -p <= 0}
Abstract trace: entry (loop_head loop_t loop_body)^{3} loop_f ret

Invariants using ElinaOct
entry={}
loop_head={-i <= 0; i <= 10; i-p <= 0; -i-p <= 0; -p <= 0}
loop_f={-i <= 0; i <= 10; i-p <= 0; -i-p <= 0; -p <= 0}
ret={-i <= -10; i <= 10; i-p <= 0; -i-p <= -20; -p <= -10}
loop_t={-i <= 0; i <= 10; i-p <= 0; -i-p <= 0; -p <= 0}
loop_body={-i <= 0; i <= 9; i-p <= 0; -i-p <= 0; -p <= 0}
Abstract trace: entry (loop_head loop_t loop_body)^{3} loop_f ret

Invariants using ElinaPk
entry={}
loop_head={4*i-p = 0; -i <= 0; i <= 10}
loop_f={4*i-p = 0; -i <= 0; i <= 10}
ret={i = 10; -p = -40}
loop_t={4*i-p = 0; -i <= 0; i <= 10}
loop_body={4*i-p = 0; -p <= 0; p <= 36}
Abstract trace: entry (loop_head loop_t loop_body)^{3} loop_f ret

entry:
  k = 0;
  i = 0;
  goto bb1;
bb1:
  goto bb1_t,bb1_f;
bb1_t:
  assume(i != 9);
  goto bb2;
bb2:
  i = i+1;
  k = k+1;
  goto bb1;
bb1_f:
  assume(i = 9);
  goto ret;
ret:


Invariants using ElinaZones
entry={}
bb1={-i+k <= 0; -i <= 0; -k <= 0}
bb1_f={-i+k <= 0; -i <= 0; -k <= 0}
ret={-i+k <= 0; -i <= -9; i <= 9; i-k <= 9; -k <= 0; k <= 9}
bb1_t={-i+k <= 0; -i <= 0; -k <= 0}
bb2={-i+k <= 0; -i <= 0; -k <= 0}
Abstract trace: entry (bb1 bb1_t bb2)^{3} bb1_f ret

Invariants using ElinaOct
entry={}
bb1={-i <= 0; i-k <= 0; -i-k <= 0; -k <= 0; -i+k <= 0}
bb1_f={-i <= 0; i-k <= 0; -i-k <= 0; -k <= 0; -i+k <= 0}
ret={-i <= -9; i <= 9; i-k <= 0; -i-k <= -18; -k <= -9; i+k <= 18; -i+k <= 0; k <= 9}
bb1_t={-i <= 0; i-k <= 0; -i-k <= 0; -k <= 0; -i+k <= 0}
bb2={-i <= 0; i-k <= 0; -i-k <= 0; -k <= 0; -i+k <= 0}
Abstract trace: entry (bb1 bb1_t bb2)^{3} bb1_f ret

Invariants using ElinaPk
entry={}
bb1={i-k = 0; -i <= 0}
bb1_f={i-k = 0; -i <= 0}
ret={i = 9; -k = -9}
bb1_t={i-k = 0; -i <= 0}
bb2={i-k = 0; -k <= 0}
Abstract trace: entry (bb1 bb1_t bb2)^{3} bb1_f ret

=== End ./test-bin/elina-domains ===
=== Begin ./test-bin/elina-octagons ===
entry:
  k = 200;
  n = 100;
  x = 0;
  y = k;
  goto loop;
loop:
  goto loop_body_1,ret;
loop_body_1:
  assume(-n+x <= -1);
  goto loop_body_2;
loop_body_2:
  x = x+1;
  goto loop_body_3;
loop_body_3:
  t = 2*x;
  goto loop_body_4;
loop_body_4:
  y = -t+200;
  goto loop;
ret:
  assume(n-x <= 0);
  assert(-k+x+y <= 0);


Invariants using ElinaOct
Abstract trace: entry (loop loop_body_1 loop_body_2 loop_body_3 loop_body_4)^{3} ret
user-defined assertion checker
1  Number of total safe checks
0  Number of total error checks
0  Number of total warning checks
0  Number of total unreachable checks

entry:
  k = 200;
  n = 100;
  x = 0;
  y = k;
  goto loop;
loop:
  goto loop_body_1,ret;
loop_body_1:
  assume(-n+x <= -1);
  goto loop_body_2;
loop_body_2:
  x = x+1;
  goto loop_body_3;
loop_body_3:
  goto loop_body_4;
loop_body_4:
  y = k-2*x;
  goto loop;
ret:
  assume(n-x <= 0);
  assert(-k+x+y <= 0);


Invariants using ElinaOct
Abstract trace: entry (loop loop_body_1 loop_body_2 loop_body_3 loop_body_4)^{3} ret
user-defined assertion checker
1  Number of total safe checks
0  Number of total error checks
0  Number of total warning checks
0  Number of total unreachable checks

entry:
  x = 0;
  y = 200;
  goto loop;
loop:
  goto loop_body_1,ret;
loop_body_1:
  assume(x <= 99);
  goto loop_body_2;
loop_body_2:
  x1 = x;
  goto loop_body_3;
loop_body_3:
  x1 = x1+1;
  goto loop_body_4;
loop_body_4:
  y = -2*x1+200;
  x = x1;
  goto loop;
ret:
  assume(-x <= -100);
  assert(x+y <= 200);


Invariants using ElinaOct
Abstract trace: entry (loop loop_body_1 loop_body_2 loop_body_3 loop_body_4)^{3} ret
user-defined assertion checker
1  Number of total safe checks
0  Number of total error checks
0  Number of total warning checks
0  Number of total unreachable checks

entry:
  k = 200;
  n = 100;
  x = 0;
  y = k;
  goto loop;
loop:
  goto loop_body_1,ret;
loop_body_1:
  assume(-n+x <= -1);
  goto loop_body_2;
loop_body_2:
  x = x+1;
  goto loop_body_3;
loop_body_3:
  t = 2*x;
  goto loop_body_4;
loop_body_4:
  y = k+t;
  goto loop;
ret:
  assume(n-x <= 0);
  assert(k+x-y <= 0);


Invariants using ElinaOct
Abstract trace: entry (loop loop_body_1 loop_body_2 loop_body_3 loop_body_4)^{3} ret
user-defined assertion checker
1  Number of total safe checks
0  Number of total error checks
0  Number of total warning checks
0  Number of total unreachable checks

entry:
  x = 0;
  y = 200;
  goto loop;
loop:
  goto loop_body,ret;
loop_body:
  assume(x <= 99);
  x1 = x+1;
  y1 = -2*x1+200;
  x = x1;
  y = y1;
  goto loop;
ret:
  assume(-x <= -100);
  assert(x+y <= 200);


Invariants using ElinaOct
Abstract trace: entry (loop loop_body)^{3} ret
user-defined assertion checker
1  Number of total safe checks
0  Number of total error checks
0  Number of total warning checks
0  Number of total unreachable checks

=== End ./test-bin/elina-octagons ===
=== Begin ./test-bin/precond-1-elina ===
bb0:
  goto bb1,bb2;
bb1:
  assume(-argc <= -3);
  assert(-len <= -3);
  goto bb3;
bb3:
  goto bb4,bb5;
bb4:
  assume(-argc <= -2);
  assert(-len <= -2);
  goto bb6;
bb6:

bb5:
  goto bb6;
bb2:
  goto bb3;

Necessary preconditions from error states using Polyhedra:
bb0={len <= 2; -argc+len <= -1; -argc <= -2}
bb2={-argc <= -2; len <= 1}
bb3={len <= 1; -argc <= -2}
bb5=_|_
bb6=_|_
bb4={-argc <= -2; len <= 1}
bb1={len <= 2; -argc <= -3}
Necessary preconditions from safe states using Polyhedra:
bb0={}
bb2={}
bb3={}
bb5={}
bb6={}
bb4={-argc <= -2; -len <= -2}
bb1={-argc <= -3; -len <= -3}
=== End ./test-bin/precond-1-elina ===
=== Begin ./test-bin/precond-2-elina ===
bb1:
  i = 0;
  goto bb2;
bb2:
  goto bb3,bb5;
bb3:
  assume(i-n <= 0);
  assert(-i <= 0);
  assert(i-n <= -1);
  i = i+1;
  goto bb4;
bb4:
  goto bb2,bb5;
bb5:
  assume(-i <= -100);


Necessary preconditions from error states using Polyhedra:
bb1={-n <= 0}
bb2={i-n <= 0}
bb5=_|_
bb3={i-n <= 0}
bb4={i-n <= 0}
Necessary preconditions from safe states using Polyhedra:
bb1={}
bb2={-i <= 0}
bb5={-i <= -100}
bb3={i-n <= -1; -i <= 0}
bb4={-i <= 0}
=== End ./test-bin/precond-2-elina ===
=== Begin ./test-bin/soct-elina ===
=== End ./test-bin/soct-elina ===
=== Begin ./test-bin/td_inter_1-elina ===
z:int32 declare foo(x:int32)
entry:
  y = x+1;
  goto exit;
exit:
  z = y+2;


y1:int32 declare bar(a:int32)
entry:
  x1 = a;
  w1 = 5;
  goto exit;
exit:
  y1:int32 = call foo(x1:int32);
  assert(-y1 <= -6);
  assert(y1 <= 17);


t:int32 declare rec1(s:int32)
entry:
  r = s-1;
  goto exit;
exit:
  t:int32 = call rec2(r:int32);


t1:int32 declare rec2(s1:int32)
entry:
  a = 10;
  r1 = s1-1;
  goto exit;
exit:
  t1:int32 = call rec1(r1:int32);
  assert(-a <= -5);


res:int32 declare main()
entry:
  x2 = 3;
  x3 = 4;
  x4 = 5;
  x5 = 6;
  y2:int32 = call bar(x2:int32);
  assert(y2 = 6);
  __:int32 = call rec1(y2:int32);
  goto exit;
exit:
  z2 = y2+2;
  y3:int32 = call bar(x2:int32);
  assert(y3 = 6);
  z3 = y3+z2;
  w2:int32 = call foo(z3:int32);
  assert(w2 = 17);
  y4:int32 = call bar(x3:int32);
  assert(y4 = 7);
  y5:int32 = call bar(x4:int32);
  assert(y5 = 8);
  y6:int32 = call bar(x5:int32);
  assert(y6 = 9);
  res = w2+y4;
  res = res+y5;
  res = res+y6;
  assert(res = 41);


Running top-down inter-procedural analysis with ElinaOct
16  Number of total safe checks
 0  Number of total error checks
 0  Number of total warning checks
 0  Number of total unreachable checks
16  Number of total safe checks
 0  Number of total error checks
 0  Number of total warning checks
 0  Number of total unreachable checks
=== End ./test-bin/td_inter_1-elina ===
=== Begin ./test-bin/test4-real-elina ===
Running ELINA

INITIALLY={}
ADDING CONSTRAINTS={-x <= -1; x <= 1}
EXPECTED={x = 1}
RESULT={-x <= -1; x <= 1}
------------------------------------
INITIALLY={}
ADDING CONSTRAINTS={-x <= -1/2; x <= 1/2}
EXPECTED={x = 1/2}
RESULT={-x <= -1/2; x <= 1/2}
------------------------------------
INITIALLY={}
ADDING CONSTRAINTS={-x <= -1/2; x <= 1/2}
EXPECTED={x = 1/2}
RESULT={-x <= -1/2; x <= 1/2}
------------------------------------
=== End ./test-bin/test4-real-elina ===
=== Begin ./test-bin/unittests-backward-elina ===
=== End ./test-bin/unittests-backward-elina ===
=== Begin ./test-bin/unittests-rename-elina ===
 ===== ElinaPk ====
Before renaming {-y = -5; x <= 0}
After rename x with w and y with z={w <= 0; -z = -5}
After rename x with w={w <= 0; -y = -5}
=== End ./test-bin/unittests-rename-elina ===
